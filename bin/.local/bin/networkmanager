#!/bin/python

from pyrof.rofi import Rofi
from subprocess import call
import subprocess as sub
# from uuid import uuid4
import gi

gi.require_version('NM', '1.0')
from gi.repository import NM  # noqa


client = NM.Client.new(None)
wifi_list = dict()


def ssid_to_utf8(ap):
    ssid = ap.get_ssid()
    if not ssid:
        return None
    return NM.utils_ssid_to_utf8(ap.get_ssid().get_data())


def flags_to_security(flags, wpa_flags, rsn_flags):
    str = ""
    if((flags & getattr(NM, '80211ApFlags').PRIVACY)
            and wpa_flags == 0 and rsn_flags == 0):
        str += "WEP "
    if wpa_flags != 0:
        str += "WPA1 "
    if rsn_flags != 0:
        str += "WPA2 "
    if (wpa_flags & getattr(NM, "80211ApSecurityFlags").KEY_MGMT_802_1X) or (
            rsn_flags & getattr(NM, "80211ApSecurityFlags").KEY_MGMT_802_1X):
        str = str + " 802.1X"
    return str.lstrip()


def strength_icon(strength):
    if strength > 80:
        str = "*****"
    elif strength > 60:
        str = "****"
    elif strength > 40:
        str = "***"
    elif strength > 20:
        str = "**"
    else:
        str = "*"
    return str


def active_connection(ssid):
    acons = client.get_active_connections()
    str = ""
    for ac in acons:
        print(ac.get_id())
        if ac.get_id() == ssid:
            str = ">"
    return str


def print_access_point(ap):
    ssid = ssid_to_utf8(ap)
    if ssid is None:
        return
    strength = ap.get_strength()
    strength = strength_icon(strength)
    flags = ap.get_flags()
    wpa_flags = ap.get_wpa_flags()
    rsn_flags = ap.get_rsn_flags()
    security = flags_to_security(flags, wpa_flags, rsn_flags)
    ssid_name = ssid
    if len(ssid) >= 11:
        ssid_name = ssid[:10] + '...'

    str = active_connection(ssid)
    str += f"\t{ssid_name}"
    str += f"\t{strength}"
    str += f"\t{security}"
    wifi_list[str] = ssid


def list_saved_wifi():
    wifi_list.clear()
    connection = client.get_connections()

    for c in connection:
        wifi_list[c.get_id()] = c.get_id()


def rescan_cb(dev, res, data):
    if dev.request_scan_finish(res):
        call(['notify-send', 'Wifi Scan Complete'])
    else:
        call(['notify-send', 'Wifi Scan Failed'])


def list_available_wifi():
    wifi_list.clear()
    devices = client.get_devices()
    for dev in devices:
        if dev.get_device_type() == NM.DeviceType.WIFI:
            dev.request_scan_async(None, None, None)
            for ap in dev.get_access_points():
                print_access_point(ap)


def menu():
    rofi = Rofi()
    rofi.base_command = ['rofi', '-no-default-config']
    rofi.dmenu = True
    rofi.font = 'FiraCode Nerd Font 11'
    rofi.prompt = "Network"
    rofi.theme_str = "listview { lines: 4; }"
    rofi.theme_str += "element-text{horizontal-align:0;}"
    rofi = rofi(wifi_list)
    return rofi


def check_device():
    devcheck = sub.getoutput('nmcli radio wifi')
    if 'enable' in devcheck:
        return False
    else:
        return True


def generate_menu():
    wifi_list['==========================================='] = ''
    if check_device():
        wifi_list['Power Up Device'] = 'up'
    else:
        wifi_list['Power Down Device'] = 'down'
    wifi_list['Delete Connection'] = 'del'


def password(ssid):
    rofi = Rofi()
    rofi.base_command = ['rofi', '-no-default-config']
    rofi.dmenu = True
    rofi.font = 'FiraCode Nerd Font 11'
    rofi.password = True
    rofi.prompt = 'Password'
    rofi.theme_str = "listview { lines: 4; }"
    rofi.theme_str += "element-text{horizontal-align:0;}"
    rofi = rofi()
    print(rofi.selected)
    call(['nmcli', 'device', 'wifi', 'connect', ssid,
         'password', rofi.selected])


def remove_available():
    list_saved_wifi()
    m = menu()
    call(['nmcli', 'connection', 'delete', m.value])


def main():
    list_available_wifi()
    generate_menu()
    m = menu()
    if 'WPA' in m.selected:
        password(m.value)
    elif m.value == 'up':
        call(['nmcli', 'radio', 'wifi', 'on'])
    elif m.value == 'down':
        call(['nmcli', 'radio', 'wifi', 'off'])
    elif m.value == 'del':
        remove_available()
    elif m.value != '':
        call(['nmcli', 'device', 'wifi', 'connect', m.value])


main()
